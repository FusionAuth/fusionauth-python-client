/*
 * Copyright (c) 2018-2019, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
savantVersion = "1.0.0"

project(group: "io.fusionauth", name: "fusionauth-python-client", version: "1.26.0", licenses: ["ApacheV2_0"]) {
  workflow {
    standard()
  }

  publishWorkflow {
    subversion(repository: "http://svn.inversoft.org/savant")
  }

  publications {
    main {
      publication(name: project.name, type: "zip", file: "build/zips/fusionauth-python-client.zip")
    }
  }
}

// Plugins
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:1.0.2")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:1.0.1")
file = loadPlugin(id: "org.savantbuild.plugin:file:1.0.2")

target(name: "clean", description: "Cleans the build directory") {
  file.prune(dir: "build/zips")
  file.prune(dir: "dist")
}

target(name: "compile", description: "Builds archives of the source and compiled versions of the code.", dependsOn: ["setup-python"]) {
  def proc = "python3 setup.py sdist bdist_wheel".execute()
  proc.consumeProcessOutput(System.out, System.err)
  proc.waitFor()
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["compile"]) {
  file.zip(file: "build/zips/fusionauth-python-client.zip") {
    fileSet(dir: "src/main/python", excludePatterns: [/.*pyc/])
    zipFileSet(dir: "src/examples/python", prefix: "examples", excludePatterns: [/.*pyc/])
  }

  dependency.integrate()
}

target(name: "test", description: "Runs the project's tests", dependsOn: ["compile"]) {
  def pb = new ProcessBuilder("python3", "src/test/python/fusionauth/fusionauth_client_test.py")
  pb.environment().put("PYTHONPATH", "src/main/python")
  if (pb.inheritIO().start().waitFor() != 0) {
    fail("Tests failed")
  }
}

/**
 * You can have this install to your local directory ($HOME/.local/bin), just be sure it is in your path
 * OR you can omit the --user flag to install to the default location (which will require admin
 * if you aren't virtualizing your python)
 */
target(name: "setup-python", description: "Gets the python dependencies") {
  def proc = "python3 -m pip install --user --upgrade setuptools wheel twine unittest2 requests deprecated".execute()
  proc.consumeProcessOutput(System.out, System.err)
  proc.waitFor()
}

/**
 * You don't need to do this but, if you have trouble logging in, consider using the .pypirc file.
 *
 * https://docs.python.org/2/distutils/packageindex.html#pypirc
 *
 * <code>
 * [pypi]
 * username = <your username>
 * password = <your password>
 * </code>
 */
target(name: "publish", description: "Publishes source and built versions of the packages to PyPi", dependsOn: ["clean", "compile"]) {
  ProcessBuilder pb = new ProcessBuilder(
      "python3", "-m", "twine", "upload", "dist/*", "--verbose")
      .inheritIO()
      .directory(new File('.'))

  def process = pb.start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
  return process.exitValue() == 0
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["int"]) {
  release.release()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
    idea.iml()
}
