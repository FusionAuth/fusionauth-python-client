/*
 * Copyright (c) 2018, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
savantVersion = "1.0.0"

project(group: "io.fusionauth", name: "fusionauth-python-client", version: "1.0.0", licenses: ["ApacheV2_0"]) {
    workflow {
        standard()
    }

    publishWorkflow {
        subversion(repository: "http://svn.inversoft.org/savant")
    }

    publications {
        main {
            publication(name: project.name, type: "zip", file: "build/zips/fusionauth-python-client.zip")
        }
    }
}

// Plugins
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:${savantVersion}")
file = loadPlugin(id: "org.savantbuild.plugin:file:${savantVersion}")

target(name: "clean", description: "Cleans the build directory") {
    file.prune(dir: "build/zips")
}

target(name: "compile", description: "No-op") {
    // Nothing
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["compile"]) {
    file.zip(file: "build/zips/fusionauth-python-client.zip") {
        fileSet(dir: "src/main/python", excludePatterns: [/.*pyc/])
        zipFileSet(dir: "src/examples/python", prefix: "examples", excludePatterns: [/.*pyc/])
    }

    dependency.integrate()
}

target(name: "setup-tests") {
    "pip install unittest2 requests".execute()
}

target(name: "test", description: "Runs the project's tests", dependsOn: ["compile"]) {
    def pb = new ProcessBuilder("python", "src/test/python/fusionauth/fusionauth_client_test.py")
    pb.environment().put("PYTHONPATH", "src/main/python")
    if (pb.inheritIO().start().waitFor() != 0) {
        fail("Tests failed")
    }
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["int"]) {
    release.release()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
//    idea.iml()
}
